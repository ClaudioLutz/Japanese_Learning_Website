"""Add course purchasing

Revision ID: cc5d932d7eed
Revises: fix_background_image_url_length
Create Date: 2025-07-28 10:27:12.657433

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'cc5d932d7eed'
down_revision = 'fix_background_image_url_length'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('course_purchase',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.Column('price_paid', sa.Float(), nullable=False),
    sa.Column('purchased_at', sa.DateTime(), nullable=False),
    sa.Column('stripe_payment_intent_id', sa.String(length=100), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'course_id')
    )
    with op.batch_alter_table('social_auth_usersocialauth', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_social_auth_user'))

    op.drop_table('social_auth_usersocialauth')
    op.drop_table('social_auth_code')
    op.drop_table('social_auth_nonce')
    op.drop_table('social_auth_association')
    with op.batch_alter_table('course', schema=None) as batch_op:
        batch_op.add_column(sa.Column('price', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('is_purchasable', sa.Boolean(), nullable=True))

    op.execute('UPDATE course SET price = 0.0 WHERE price IS NULL')
    op.execute('UPDATE course SET is_purchasable = false WHERE is_purchasable IS NULL')

    with op.batch_alter_table('course', schema=None) as batch_op:
        batch_op.alter_column('price', nullable=False)
        batch_op.alter_column('is_purchasable', nullable=False)
        batch_op.alter_column('is_published',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))

    with op.batch_alter_table('lesson', schema=None) as batch_op:
        batch_op.alter_column('order_index',
               existing_type=sa.INTEGER(),
               nullable=False,
               existing_server_default=sa.text('0'))
        batch_op.alter_column('is_published',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('price',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=False,
               existing_server_default=sa.text('0.0'))
        batch_op.drop_index(batch_op.f('idx_lesson_category'))

    with op.batch_alter_table('lesson_content', schema=None) as batch_op:
        batch_op.alter_column('media_url',
               existing_type=sa.VARCHAR(length=1000),
               type_=sa.String(length=255),
               existing_nullable=True)
        batch_op.alter_column('ai_generation_details',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
        batch_op.drop_index(batch_op.f('idx_lesson_content_lesson'))
        batch_op.drop_index(batch_op.f('idx_lesson_content_page'))

    with op.batch_alter_table('lesson_prerequisite', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_lesson_prerequisite_lesson'))
        batch_op.drop_index(batch_op.f('idx_lesson_prerequisite_prereq'))

    with op.batch_alter_table('lesson_purchase', schema=None) as batch_op:
        batch_op.alter_column('price_paid',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=False)
        batch_op.alter_column('purchased_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.drop_index(batch_op.f('idx_lesson_purchase_user'))

    with op.batch_alter_table('quiz_option', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_quiz_option_question'))

    with op.batch_alter_table('quiz_question', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_quiz_question_content'))

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('subscription_level',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'free'::character varying"))

    with op.batch_alter_table('user_lesson_progress', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_user_progress_lesson'))
        batch_op.drop_index(batch_op.f('idx_user_progress_user'))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_lesson_progress', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_user_progress_user'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_user_progress_lesson'), ['lesson_id'], unique=False)

    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.alter_column('subscription_level',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'free'::character varying"))

    with op.batch_alter_table('quiz_question', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_quiz_question_content'), ['lesson_content_id'], unique=False)

    with op.batch_alter_table('quiz_option', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_quiz_option_question'), ['question_id'], unique=False)

    with op.batch_alter_table('lesson_purchase', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_lesson_purchase_user'), ['user_id'], unique=False)
        batch_op.alter_column('purchased_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('price_paid',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=False)

    with op.batch_alter_table('lesson_prerequisite', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_lesson_prerequisite_prereq'), ['prerequisite_lesson_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_lesson_prerequisite_lesson'), ['lesson_id'], unique=False)

    with op.batch_alter_table('lesson_content', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_lesson_content_page'), ['page_number'], unique=False)
        batch_op.create_index(batch_op.f('idx_lesson_content_lesson'), ['lesson_id'], unique=False)
        batch_op.alter_column('ai_generation_details',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
        batch_op.alter_column('media_url',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=1000),
               existing_nullable=True)

    with op.batch_alter_table('lesson', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_lesson_category'), ['category_id'], unique=False)
        batch_op.alter_column('price',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=False,
               existing_server_default=sa.text('0.0'))
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('is_published',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
        batch_op.alter_column('order_index',
               existing_type=sa.INTEGER(),
               nullable=True,
               existing_server_default=sa.text('0'))

    with op.batch_alter_table('course', schema=None) as batch_op:
        batch_op.alter_column('updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
        batch_op.alter_column('is_published',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
        batch_op.drop_column('is_purchasable')
        batch_op.drop_column('price')

    op.create_table('social_auth_association',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('server_url', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('handle', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('secret', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('issued', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('lifetime', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('assoc_type', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('social_auth_association_pkey')),
    sa.UniqueConstraint('server_url', 'handle', name=op.f('social_auth_association_server_url_handle_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('social_auth_nonce',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('server_url', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('timestamp', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('salt', sa.VARCHAR(length=65), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('social_auth_nonce_pkey')),
    sa.UniqueConstraint('server_url', 'timestamp', 'salt', name=op.f('social_auth_nonce_server_url_timestamp_salt_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('social_auth_code',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('email', sa.VARCHAR(length=254), autoincrement=False, nullable=False),
    sa.Column('code', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('social_auth_code_pkey')),
    sa.UniqueConstraint('email', 'code', name=op.f('social_auth_code_email_code_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('social_auth_usersocialauth',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('uid', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('extra_data', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('modified', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('social_auth_usersocialauth_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('social_auth_usersocialauth_pkey')),
    sa.UniqueConstraint('provider', 'uid', name=op.f('social_auth_usersocialauth_provider_uid_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    with op.batch_alter_table('social_auth_usersocialauth', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_social_auth_user'), ['user_id'], unique=False)

    op.drop_table('course_purchase')
    # ### end Alembic commands ###

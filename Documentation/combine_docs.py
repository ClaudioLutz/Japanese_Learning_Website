#!/usr/bin/env python3
"""
Script to combine all .md files in the Documentation folder into one consolidated file.
Creates 00_project_book.md with all documentation combined.
"""

import os
import glob
import re
from pathlib import Path

def natural_sort_key(text):
    """
    Sort key function for natural sorting (handles numbers properly)
    e.g., 01-file.md comes before 10-file.md
    """
    return [int(text) if text.isdigit() else text.lower() for text in re.split('([0-9]+)', text)]

def combine_markdown_files():
    """
    Combine all .md files in the current directory into 00_project_book.md
    """
    # Get the current directory (Documentation folder)
    current_dir = Path(__file__).parent
    
    # Find all .md files except the output file
    md_files = []
    for file_path in current_dir.glob("*.md"):
        if file_path.name != "00_project_book.md":  # Exclude the output file
            md_files.append(file_path)
    
    # Sort files naturally (01, 02, 03, ... 10, 11, etc.)
    md_files.sort(key=lambda x: natural_sort_key(x.name))
    
    if not md_files:
        print("No .md files found to combine.")
        return
    
    # Output file path
    output_file = current_dir / "00_project_book.md"
    
    print(f"Combining {len(md_files)} markdown files into {output_file.name}")
    print("Files to be combined:")
    for file_path in md_files:
        print(f"  - {file_path.name}")
    
    # Combine all files
    with open(output_file, 'w', encoding='utf-8') as outfile:
        # Write header
        outfile.write("# Japanese Learning Website - Complete Project Documentation\n\n")
        outfile.write("*This document is automatically generated by combining all documentation files.*\n\n")
        outfile.write("---\n\n")
        
        # Process each file
        for i, file_path in enumerate(md_files):
            print(f"Processing: {file_path.name}")
            
            try:
                with open(file_path, 'r', encoding='utf-8') as infile:
                    content = infile.read().strip()
                
                # Add file separator and title
                outfile.write(f"\n\n# {file_path.stem.replace('-', ' ').replace('_', ' ').title()}\n")
                outfile.write(f"*Source: {file_path.name}*\n\n")
                
                # Write the content
                if content:
                    outfile.write(content)
                else:
                    outfile.write("*This file is empty.*")
                
                # Add separator between files (except for the last one)
                if i < len(md_files) - 1:
                    outfile.write("\n\n---\n")
                    
            except Exception as e:
                print(f"Error processing {file_path.name}: {e}")
                outfile.write(f"\n\n*Error reading {file_path.name}: {e}*\n")
    
    print(f"\nSuccessfully created {output_file.name}")
    print(f"Total files combined: {len(md_files)}")

if __name__ == "__main__":
    combine_markdown_files()
